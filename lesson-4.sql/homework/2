Easy-Level Tasks (10)

   1. Write a query to select the top 5 employees from the Employees table.
	SELECT TOP 5 * FROM Employees;
	2. Use SELECT DISTINCT to select unique ProductName values from the Products table.
	SELECT DISTINCT ProductName FROM Products;
	3. Write a query that filters the Products table to show products with Price > 100.
	SELECT * FROM Products WHERE Price > 100;
    4.Write a query to select all CustomerName values that start with 'A' using the LIKE operator.
	SELECT CustomerName FROM Customers WHERE CustomerName LIKE 'A%';
   5. Order the results of a Products query by Price in ascending order.
   SELECT * FROM Products ORDER BY Price ASC;
    6.Write a query that uses the WHERE clause to filter for employees with Salary >= 5000 and Department = 'HR'.
	SELECT * FROM Employees WHERE Salary >= 5000 AND Department = 'HR';
    7.Use ISNULL to replace NULL values in the Email column with the text "noemail@example.com".
	SELECT EmployeeID, ISNULL(Email, 'noemail@example.com') AS Email FROM Employees;
    8.Write a query that shows all products with Price BETWEEN 50 AND 100.
	SELECT * FROM Products WHERE Price BETWEEN 50 AND 100;
   9. Use SELECT DISTINCT on two columns (Category and ProductName) in the Products table.
   SELECT DISTINCT Category, ProductName FROM Products;
  10.  Order the results by ProductName in descending order.
	SELECT * FROM Products ORDER BY ProductName DESC;
	Medium-Level Tasks (10)

   1. Write a query to select the top 10 products from the Products table, ordered by Price DESC.
   SELECT TOP 10 * FROM Products ORDER BY Price DESC;
   2. Use COALESCE to return the first non-NULL value from FirstName or LastName in the Employees table.
   SELECT EmployeeID, COALESCE(FirstName, LastName, 'Unknown') AS FullName FROM Employees;
    3.Write a query that selects distinct Category and Price from the Products table.
	SELECT DISTINCT Category, Price FROM Products;
    4.Write a query that filters the Employees table to show employees whose Age is either between 30 and 40 or Department = 'Marketing'.
	SELECT * FROM Employees WHERE (Age BETWEEN 30 AND 40) OR Department = 'Marketing';
    5.Use OFFSET-FETCH to select rows 11 to 20 from the Employees table, ordered by Salary DESC.
	SELECT * FROM Employees ORDER BY Salary DESC OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;
   6. Write a query to display all products with Price <= 1000 and Stock > 50, sorted by Stock in ascending order.
   SELECT * FROM Products WHERE Price <= 1000 AND Stock > 50 ORDER BY Stock ASC;
  7.  Write a query that filters the Products table for ProductName values containing the letter 'e' using LIKE.
  SELECT * FROM Products WHERE ProductName LIKE '%e%';
  8.  Use IN operator to filter for employees who work in either 'HR', 'IT', or 'Finance'.
  SELECT * FROM Employees WHERE Department IN ('HR', 'IT', 'Finance');
   9. Write a query that uses the ANY operator to find employees who earn more than the average salary of all employees.
   SELECT * FROM Employees WHERE Salary > ANY (SELECT AVG(Salary) FROM Employees);
   10. Use ORDER BY to display a list of customers ordered by City in ascending and PostalCode in descending order.
   SELECT * FROM Customers ORDER BY City ASC, PostalCode DESC;

